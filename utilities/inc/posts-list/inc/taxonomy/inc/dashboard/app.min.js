"use strict";

(function ($) {
  // ---
  // autocomplete

  var searchRequest;
  function attachAutocomplete($inputs) {
    $inputs.each(function () {
      var post_type = $(this).closest('.list-post-type-wrapper').data('post-type');

      // UX
      var $input = $(this).on('focus click', function () {
        // select all text
        if ($input.hasClass('selected')) $input.select();
      }).on('keydown', function (e) {
        // once entry is selected don't allow any changes
        if ($input.hasClass('selected')) {
          // make sure all text is selected
          $input.select();

          // ... but removing selection
          if ((e.keyCode || e.which) === 8) $input.autocomplete('enable').removeClass('selected')
          // ... and flush remove post ID input
          .prev().val('');else return false;
        }
      });
      var Autocomplete = $input.autocomplete({
        source: function source(term, suggest) {
          try {
            searchRequest.abort();
          } catch (e) {}
          searchRequest = fetch("/wp-json/wp/v2/search?subtype=".concat(post_type, "&search=").concat(term.term)).then(function (response) {
            return response.json();
          }).then(function (posts) {
            posts.forEach(function (post) {
              post.label = post.title;
            });
            suggest(posts);
          })["catch"](function (error) {});
        },
        classes: {
          'ui-autocomplete': 'suggest-item-list'
        },
        position: {
          my: 'left top-1'
        },
        select: function select(e, ui) {
          // mark input as selected and disabled autocomplete
          $input.addClass('selected').autocomplete('disable');
          // set post ID value
          $input.prev().val(ui.item.id);
          // set edit link
          $input.next().prop('href', "/wp-admin/post.php?post=".concat(ui.item.id, "&action=edit"));
          window.requestAnimationFrame(function () {
            $input.select();
          });
        }
      })
      // disable autocomplete for selected inputs
      .autocomplete($input.val() ? 'disable' : 'enable');

      // override output (Gutenberg style)
      Autocomplete.autocomplete('instance')._renderItem = function (ul, item) {
        return $("<li>").append("<div class=\"suggest-item\">\n                        <span class=\"suggest-item-info\">\n                            <span class=\"suggest-item-title\">\n                                ".concat(item.title.replace(/(<br ?\/?>|\n)/, ' ').replace(new RegExp(this.term, 'gi'), '<mark>$&</mark>'), "\n                            </span>\n                            <span class=\"suggest-item-url\">").concat(item.url, "</span>\n                        </span>\n                        <span class=\"suggest-item-type\">").concat(item.subtype, "</span>\n                    </div>")).appendTo(ul);
      };

      // calculate suggestions width (same as input)
      Autocomplete.autocomplete('instance')._resizeMenu = function () {
        this.menu.element.outerWidth(this.element[0].offsetWidth);
      };
    });
  }

  // ---
  // event lists widgets UI

  $('#list-posts-order-widget').each(function () {
    var $widget = $(this);
    var $postTypeTabs = $widget.find('.list-post-type-wrapper');

    // switch post type
    $widget.find('select#switch-list-post-type').on('change', function (e) {
      $postTypeTabs.each(function () {
        this.style.display = '';
      });
      $postTypeTabs.filter("[data-post-type=\"".concat(e.target.value, "\"]")).css('display', 'inherit');
    }).trigger('change');
    $postTypeTabs.each(function () {
      var $lists = $(this).find('.posts-list').each(function () {
        var post_type = $(this).closest('.list-post-type-wrapper').data('post-type');
        var list = $(this).data('list');

        // add post input
        $(this).find('.button-secondary').on('click', function (e) {
          e.preventDefault();
          var $button = $(this);
          $.get(ajaxurl, {
            action: 'add-post-to-list',
            list: list
          }, function (response) {
            var $input = $(response);

            // add event input to list
            $button.before($input);
            attachAutocomplete($input.find("input[name=\"list-posts-order[".concat(post_type, "_list][").concat(list, "][]\"] + input")));
          });
        });

        // sort
        $(this).sortable({
          handle: '.dashicons-menu',
          items: '> div',
          containment: 'parent'
        });

        // remove
        $(this).on('click', '.dashicons-no-alt', function () {
          $(this).parent().remove();
        });
        attachAutocomplete($(this).find("input[name=\"list-posts-order[".concat(post_type, "_list][").concat(list, "][]\"] + input")));
      });

      // switch lists
      $(this).find("select#switch-".concat($(this).data('post-type'), "-list")).on('change', function (e) {
        $lists.each(function () {
          this.style.display = '';
        });
        $lists.filter("[data-list=\"".concat(e.target.value, "\"]")).show();
      }).trigger('change');
    });
  });
})(jQuery);
//# sourceMappingURL=app.min.js.map