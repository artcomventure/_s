/**
 * Calculate `clamp()` values to adjust _size_ (limited to `$min`/`$max`) between `$lower` and `$upper` screen widths.
 *
 * !!! Same unit for $min and $max only !!!
 *
 * ```
 * // use default lower and upper screen widths
 * padding-left: fluid(30px, 60px)
 *
 * // use specific lower and upper screen widths
 * padding-left: fluid(30px, 60px, 300px, 900px)
 *
 * // use specific upper screen width
 * padding-left: fluid(30px, 60px, $upper: 900px)
 * ```
 *
 * `$min` value for `$lower` and narrower screen width.
 * `$max` value for `$upper` and wider screen width.
 * All values in between are _calculated_.
 *
 * @param {numeric} $min
 * @param {numeric} $max
 * @param {numeric} $lower (optional)
 * @param {numeric} $upper (optional)
 */

@import "./strip-unit";

@function fluid ($min, $max, $lower: breakpoint(mobile), $upper: breakpoint(desktop)) {
  @if unit($min) != unit($max) {
    @warn '$min and $max values must have the same unit.';
    @return $max;
  }

  $lower: breakpoint($lower);
  @if unit($lower) != px {
    @warn 'Unit of lower screen boundary must be of type px or rem.';
    @return $max;
  }

  $upper: breakpoint($upper);
  @if unit($upper) != px {
    @warn 'Unit of upper screen boundary must be of type px or rem.';
    @return $max;
  }

  // no need for clamping values
  @if $min == $max {
    @return $min;
  }

  $lower: strip-unit($lower);
  $upper: strip-unit($upper);

  @return clamp(min($min, $max), calc(#{$min} + #{$max - $min} * (var(--root-width) - #{$lower}) / #{$upper - $lower}), max($min, $max));
}