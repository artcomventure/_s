{"version":3,"file":"custom-width.min.js","names":["Behaviours","add","$context","forEach","call","querySelectorAll","$element","matches","className","match","classList","remove","trim","concat","width","style"],"sources":["custom-width.js"],"sourcesContent":["// ---\n// Custom widths.\n// Sometimes widths aren't _normalized_ so this Ã­s a way to apply them dynamically within the backend.\n\nBehaviours.add( 'custom-width', ( $context ) => {\n\n    // convert custom container width shorthand\n    [].forEach.call( $context.querySelectorAll( '[class*=\"container-\"]' ), ( $element ) => {\n        const matches = $element.className.match( /(^| )container-(\\d+)($| )/ );\n        if ( !matches ) return;\n\n        $element.classList.remove( matches[0].trim() );\n        $element.classList.add( 'container', `width-${matches[2]}` );\n    } );\n\n    // set custom width\n    [].forEach.call( $context.querySelectorAll( '[class*=\"width-\"]' ), ( $element ) => {\n        let width = ($element.className.match( /(^| )width-(\\d+)($| )/ )||[])[2];\n        if ( !width ) return;\n\n        $element.style.width = `${width}px`;\n    } );\n\n} );"],"mappings":";;AAAA;AACA;AACA;;AAEAA,UAAU,CAACC,GAAG,CAAE,cAAc,EAAE,UAAEC,QAAQ,EAAM;EAE5C;EACA,EAAE,CAACC,OAAO,CAACC,IAAI,CAAEF,QAAQ,CAACG,gBAAgB,CAAE,uBAAwB,CAAC,EAAE,UAAEC,QAAQ,EAAM;IACnF,IAAMC,OAAO,GAAGD,QAAQ,CAACE,SAAS,CAACC,KAAK,CAAE,2BAA4B,CAAC;IACvE,IAAK,CAACF,OAAO,EAAG;IAEhBD,QAAQ,CAACI,SAAS,CAACC,MAAM,CAAEJ,OAAO,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC,CAAE,CAAC;IAC9CN,QAAQ,CAACI,SAAS,CAACT,GAAG,CAAE,WAAW,WAAAY,MAAA,CAAWN,OAAO,CAAC,CAAC,CAAC,CAAG,CAAC;EAChE,CAAE,CAAC;;EAEH;EACA,EAAE,CAACJ,OAAO,CAACC,IAAI,CAAEF,QAAQ,CAACG,gBAAgB,CAAE,mBAAoB,CAAC,EAAE,UAAEC,QAAQ,EAAM;IAC/E,IAAIQ,KAAK,GAAG,CAACR,QAAQ,CAACE,SAAS,CAACC,KAAK,CAAE,uBAAwB,CAAC,IAAE,EAAE,EAAE,CAAC,CAAC;IACxE,IAAK,CAACK,KAAK,EAAG;IAEdR,QAAQ,CAACS,KAAK,CAACD,KAAK,MAAAD,MAAA,CAAMC,KAAK,OAAI;EACvC,CAAE,CAAC;AAEP,CAAE,CAAC"}